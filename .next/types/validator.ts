// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\api\auth\change-password\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\change-password\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/change-password">
}

// Validate ..\..\app\api\auth\group-access\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\group-access\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/group-access/[id]">
}

// Validate ..\..\app\api\auth\login\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\login\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/login">
}

// Validate ..\..\app\api\auth\logout\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\logout\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ..\..\app\api\auth\refresh-token\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\refresh-token\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/refresh-token">
}

// Validate ..\..\app\api\auth\register\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\register\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/register">
}

// Validate ..\..\app\api\auth\user-groups\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\user-groups\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/user-groups">
}

// Validate ..\..\app\api\auth\validate-session\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\auth\\validate-session\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/validate-session">
}

// Validate ..\..\app\api\chats\[chatId]\files\confirm\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\chats\\[chatId]\\files\\confirm\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chats/[chatId]/files/confirm">
}

// Validate ..\..\app\api\chats\[chatId]\files\presign\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\chats\\[chatId]\\files\\presign\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chats/[chatId]/files/presign">
}

// Validate ..\..\app\api\chats\[chatId]\kb\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\chats\\[chatId]\\kb\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chats/[chatId]/kb">
}

// Validate ..\..\app\api\chats\[chatId]\messages\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\chats\\[chatId]\\messages\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chats/[chatId]/messages">
}

// Validate ..\..\app\api\chats\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\chats\\route.js")
  handler satisfies RouteHandlerConfig<"/api/chats">
}

// Validate ..\..\app\api\health\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\health\\route.js")
  handler satisfies RouteHandlerConfig<"/api/health">
}

// Validate ..\..\app\api\integrations\n8n\chat-response\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\integrations\\n8n\\chat-response\\route.js")
  handler satisfies RouteHandlerConfig<"/api/integrations/n8n/chat-response">
}

// Validate ..\..\app\api\projects\[projectId]\kb\confirm\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\projects\\[projectId]\\kb\\confirm\\route.js")
  handler satisfies RouteHandlerConfig<"/api/projects/[projectId]/kb/confirm">
}

// Validate ..\..\app\api\projects\[projectId]\kb\context\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\projects\\[projectId]\\kb\\context\\route.js")
  handler satisfies RouteHandlerConfig<"/api/projects/[projectId]/kb/context">
}

// Validate ..\..\app\api\projects\[projectId]\kb\presign\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\projects\\[projectId]\\kb\\presign\\route.js")
  handler satisfies RouteHandlerConfig<"/api/projects/[projectId]/kb/presign">
}

// Validate ..\..\app\api\projects\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\projects\\route.js")
  handler satisfies RouteHandlerConfig<"/api/projects">
}





// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
