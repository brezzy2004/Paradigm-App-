// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/"
type AppRouteHandlerRoutes = "/api/auth/change-password" | "/api/auth/group-access/[id]" | "/api/auth/login" | "/api/auth/logout" | "/api/auth/refresh-token" | "/api/auth/register" | "/api/auth/user-groups" | "/api/auth/validate-session" | "/api/chats" | "/api/chats/[chatId]/files/confirm" | "/api/chats/[chatId]/files/presign" | "/api/chats/[chatId]/kb" | "/api/chats/[chatId]/messages" | "/api/health" | "/api/integrations/n8n/chat-response" | "/api/projects" | "/api/projects/[projectId]/kb/confirm" | "/api/projects/[projectId]/kb/context" | "/api/projects/[projectId]/kb/presign"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/auth/change-password": {}
  "/api/auth/group-access/[id]": { "id": string; }
  "/api/auth/login": {}
  "/api/auth/logout": {}
  "/api/auth/refresh-token": {}
  "/api/auth/register": {}
  "/api/auth/user-groups": {}
  "/api/auth/validate-session": {}
  "/api/chats": {}
  "/api/chats/[chatId]/files/confirm": { "chatId": string; }
  "/api/chats/[chatId]/files/presign": { "chatId": string; }
  "/api/chats/[chatId]/kb": { "chatId": string; }
  "/api/chats/[chatId]/messages": { "chatId": string; }
  "/api/health": {}
  "/api/integrations/n8n/chat-response": {}
  "/api/projects": {}
  "/api/projects/[projectId]/kb/confirm": { "projectId": string; }
  "/api/projects/[projectId]/kb/context": { "projectId": string; }
  "/api/projects/[projectId]/kb/presign": { "projectId": string; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
